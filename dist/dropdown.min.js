(function(a,b){if("function"==typeof define&&define.amd)define(["exports"],b);else if("undefined"!=typeof exports)b(exports);else{var c={exports:{}};b(c.exports),a.dropdown=c.exports}})(this,function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function c(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function d(a,b,d){return b&&c(a.prototype,b),d&&c(a,d),a}Object.defineProperty(a,"__esModule",{value:!0}),a.default=void 0;/**
 * Class representing a dropdown
 */var e=/*#__PURE__*/function(){/**
     * @constructor
     * @param {Array<Dropdown~NavItem|Dropdown~NavMenu|Dropdown~NavDivider>} navList - Object representation of the context menu.
     * @param {Dropdown~Options} options - Optional parameters for this instance
     */function a(c){var d=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};b(this,a),this.dismiss=this.dismiss.bind(this),this._keyboardNavigation=this._keyboardNavigation.bind(this),this.logger=d.logger?d.logger:console.log.bind(console),this.navList=c,this._items={},this.ul=this._createList(c,"item"),this.ul.classList.add(a._baseClassName),this.domcontext=d.context||document.body}/**
     * A helper function to create the dom structure of the dropdown
     *
     * @private 
     *
     * @param navList {Array<Dropdown~NavItem|Dropdown~NavMenu|Dropdown~NavDivider>} The object representation of the context menu
     */return d(a,[{key:"_keyboardHandlers",get:function c(){var b=this;return{// up arrow
38:function d(a,c){return b._go(!0,a,c)},// down arrow
40:function d(a,c){return b._go(!1,a,c)},// left arrow
37:function e(c,d){c&&c.parentElement!==b.ul&&c.parentElement.parentElement!==b.ul?(c.classList.remove(a._activeClassName),c.parentElement.parentElement.classList.remove(a._openClassName),c.parentElement.parentElement.classList.add(a._activeClassName)):d&&d!==b.ul&&a._closeRelated(d.parentElement)},// right arrow
39:function c(b){b&&b.classList.contains(a._subnavClassName)&&(a._openNested(b),b.querySelector("li").classList.add(a._activeClassName))},// enter
13:function b(a){return a&&a.click()},// escape
27:this.dismiss}}}],[{key:"_closeRelated",// Private static methods
/**
     * A helper function to close all submenus on a given level.
     *
     * @private
     *
     * @param {Element} subnav - An element on the level we want to close all the open subnavs
     */value:function c(b){b.parentElement.querySelectorAll(".".concat(a._openClassName)).forEach(function(b){b.classList.remove(a._openClassName)})}/**
     * A helper function to open a specific submenu
     *
     * @private
     *
     * @param {Element} subnav - The element of the subnav item we want to open
     */},{key:"_openNested",value:function f(b){a._closeRelated(b),b.classList.add(a._openClassName);var c=b.querySelector("ul"),d=b.getBoundingClientRect(),e=c.getBoundingClientRect();d.right+e.width>window.innerWidth?(c.style.left="",c.style.right=a._nestedXPos):(c.style.right="",c.style.left=a._nestedXPos),d.top+e.height>window.innerHeight?(c.style.top="",c.style.bottom=a._nestedYPos):(c.style.bottom="",c.style.top=a._nestedYPos)}},{key:"_baseClassName",// General documentation of the types
/**
     * @typedef {Object} Dropdown~NavDivider
     * This is the structure of a navigation divider. It is just like the NavItem with no label or action.
     * @property {string}  [key] - A unique key for this item. It will be auto generated if not supplied
     */ /**
     * @typedef {Object} Dropdown~NavItem
     * This is the structure of a navigation item
     * @property {string|function} label    - The label which is used in the menu. If it is a function it will be called
     *                                        every time the menu is opened and set the label to the return value of
     *                                        this function. The <code>this</code> object of the function is the
     *                                        Dropdown instance itself unless otherwise bound.
     * @property {string}  [icon]           - An icon to be used. This needs to be a path to a valid css
     *                                        background-image string.
     * @property {string}  [key]            - A unique key for this item. It will be auto generated if not supplied
     * @property {boolean} [disabled=false] - If this is true the item is disabled. When disabled we will not navigate
     *                                        according to the action parameter or run the action callback.
     * @property {(string|Dropdown~actionCallback)} action - What to do when we select this nav item. If this is a
     *                                                       string we will navigate like an &lt;a&gt; tag
     */ /**
     * @typedef {Object} Dropdown~NavMenu
     * This is the structure of a navigation submenu
     * @property {string} label             - The label which is used in the menu
     * @property {string} [icon]            - An icon to be used. This needs to be a path to a valid css
     *                                        background-image string.
     * @property {string}  [key]            - A unique key for this item. It will be auto generated if not supplied
     * @property {boolean} [disabled=false] - If this is true the item is disabled. When disabled it will not be
     *                                        expanded
     * @property {Array<Dropdown~NavItem|Dropdown~NavMenu|Dropdown~NavDivider>} children - The children of this menu
     */ /**
     * The action callback. The <code>this</code> context is the instance of the dropdown itself unless otherwise bound.
     * @callback Dropdown~actionCallback
     * @param {Event} event - This is the event (either click or keypress) which triggered this handler
     */ /**
     * @typedef {Object} Dropdown~Options
     * This is the structure of the options object
     * @property {Dropdown~logger} [logger=console.log] - The logger to use
     * @property {Element} [element=document.body] - The element to attach the dropdown to
     */ /**
     * The logging function. Use this if you want to expose internal logging information.
     * @callback Dropdown~logger
     * @param {...*} logItems - This should work similarly to how <code>console.log</code> uses multiple parameters
     */ // Private members
/**
     * Base class name
     *
     * @private
     */get:function a(){return"dropdown"}/**
     * Class name of a subnav
     *
     * @private
     */},{key:"_subnavClassName",get:function a(){return"subnav"}/**
     * Class name of an open subnav
     *
     * @private
     */},{key:"_openClassName",get:function a(){return"open"}/**
     * Class name of a divider
     *
     * @private
     */},{key:"_dividerClassName",get:function a(){return"divider"}/*
     * Class name of an active item
     *
     * @private
     */},{key:"_activeClassName",get:function a(){return"active"}/**
     * Class name of a disabled item
     *
     * @private
     */},{key:"_disabledClassName",get:function a(){return"disabled"}/**
     * X-position (either positive or negative dependeing on space available) of a submenu. Relative to the parent item.
     *
     * @private
     */},{key:"_nestedXPos",get:function a(){return"95%"}/**
     * Y-position (either positive or negative depending on space available) of a submenu. Relative to the parent item.
     *
     * @private
     */},{key:"_nestedYPos",get:function a(){return"-0.2em"}}]),d(a,[{key:"_createList",value:function f(b,c){var d=this,e=document.createElement("ul");return e.addEventListener("click",function(b){var c=b.target.getAttribute("data-key");if(c&&d._items[c]){var e=d._items[c],f=e.li,g=e.navElt;return g.disabled||!g.label?(b.preventDefault(),void b.stopPropagation()):void(g.children?(a._openNested(f),b.preventDefault(),b.stopPropagation()):"string"==typeof g.action?window.location.href=g.action:"function"==typeof g.action&&g.action.call(d,b))}}),b.forEach(function(b,f){var g=document.createElement("li");if(b.key=b.key?b.key:"".concat(c,"-").concat(f),d._items.hasOwnProperty(b.key))throw new Error("Got duplicate key");else d._items[b.key]={navElt:b,li:g};g.setAttribute("data-key",b.key);var h="undefined"==typeof b.label;if((b.disabled||h)&&g.classList.add(a._disabledClassName),h?g.classList.add(a._dividerClassName):"function"==typeof b.label?g.innerText=b.label.call(d):g.innerText=b.label,b.icon)g.style.backgroundImage=b.icon;else if(b.iconClass){var i=document.createElement("span");i.className="".concat(b.iconClass," icon"),g.insertBefore(i,g.firstChild)}g.addEventListener("mouseleave",function(b){d.logger("mouseleave",b),clearTimeout(d.timeout),b.target.classList.remove(a._activeClassName)}),g.addEventListener("mouseenter",function(c){return d.logger("mouseenter",c),clearTimeout(d.timeout),b.disabled||h?void(d.timeout=setTimeout(a._closeRelated.bind(null,c.target),500)):void(c.target.classList.add(a._activeClassName),clearTimeout(d.timeout),d.timeout=b.children?setTimeout(a._openNested.bind(null,c.target),500):setTimeout(a._closeRelated.bind(null,c.target),500))}),b.children&&(g.appendChild(d._createList(b.children,b.key)),g.classList.add(a._subnavClassName)),e.appendChild(g)}),e}},{key:"setDisabledState",value:function g(b,c){var d=this._items[b],e=d.li,f=d.navElt;f.disabled=c,c?(e.classList.add(a._disabledClassName),e.classList.remove(a._openClassName),e.classList.remove(a._activeClassName),e.querySelectorAll(".".concat(a._openClassName,", .").concat(a._activeClassName)).forEach(function(b){b.classList.remove(a._openClassName),b.classList.remove(a._activeClassName)})):e.classList.remove(a._disabledClassName)}},{key:"_go",value:function f(b,c,d){var e=function(a){return b?a.previousElementSibling:a.nextElementSibling};c&&c.classList.remove(a._activeClassName);for(var g=c&&e(c)||d.children[b?d.children.length-1:0];g&&g.classList.contains(a._disabledClassName);)g=e(g);return next&&next.classList.add(a._activeClassName),next}/**
     * This is the keyboard navigation event handler
     *
     * @private
     *
     * @param {Event} e - The keyboard event that triggerd this handler
     */},{key:"_keyboardNavigation",value:function f(b){var c=this.ul.querySelectorAll(".".concat(a._openClassName," > ul"));c=0<c.length?c[c.length-1]:this.ul;var d=c.querySelector("li.".concat(a._activeClassName));this.logger(c);var e="".concat(b.keyCode);this._keyboardHandlers.hasOwnProperty(e)&&(b.stopPropagation(),b.preventDefault(),this._keyboardHandlers[e](d,c))}/**
     * Update all labels where we have a function that generates the labels instead of a string
     *
     * @private
     */},{key:"_updateLabels",value:function d(){for(var e in this._items)if(this._items.hasOwnProperty(e)){var a=this._items[e],b=a.navElt,c=a.li;"function"==typeof b.label&&(c.innerText=b.label.call(this))}}// Public methods
/**
     * Close a dropdown and remove all event listeners on it
     */},{key:"dismiss",value:function b(){this.logger("dismiss"),this.ul.classList.remove(a._openClassName),document.removeEventListener("keydown",this._keyboardNavigation),document.removeEventListener("click",this.dismiss),this.ul.querySelectorAll("li").forEach(function(b){b.classList.remove(a._openClassName),b.classList.remove(a._activeClassName)})}/**
     * This function will take an event and try to open and position the dropdown next to the mouse pointer or the
     * element the event triggered on.
     *
     * @param {Event} evt     - The event that triggered this click
     * @param {any} [context] - Optional context which is set on the Dropdown instance when we open it. This can be
     *                          anything and is available through <code>this.context</code> on the action function
     */},{key:"openClick",value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:void 0;if(this.logger(a),a.stopPropagation(),a.preventDefault(),a.clientX&&a.clientY)return this.open(window.pageXOffset+a.clientX,window.pageYOffset+a.clientY,!0,b);var c=a.target.getBoundingClientRect();return this.open(window.pageXOffset+c.right,window.pageYOffset+c.bottom,!0,b)}/**
     * Open the dropdown rooted in the given position. It will expand down and to the right by default, but change
     * expansion direction if it does not have enough space.
     *
     * @param {Number} left                  - How many pixels from the left the element should be positioned
     * @param {Number} top                   - How many pixels from the top the element should be positioned
     * @param {boolean} [autoExpandDir=true] - If true we will automatically expand the dropdown towards the top or
     *                                         left if we don't have any space for it below or to the right. If false we
     *                                         will only expand down and to the right.
     * @param {any} [context]                - Optional context which is set on the Dropdown instance when we open it.
     *                                         This can be anything and is available through <code>this.context</code>
     *                                         on the action function
     */},{key:"open",value:function g(b,c){var d=!(2<arguments.length&&void 0!==arguments[2])||arguments[2],e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:void 0;this.domcontext.contains(this.ul)||this.domcontext.appendChild(this.ul),this.context=e,this._updateLabels(),this.ul.querySelectorAll(".".concat(a._openClassName,",.").concat(a._activeClassName)).forEach(function(b){b.classList.remove(a._openClassName),b.classList.remove(a._activeClassName)}),this.ul.classList.add(a._openClassName);var f=this.ul.getBoundingClientRect();return this.ul.style.left="".concat(b,"px"),this.ul.style.top="".concat(c,"px"),d&&(b+f.width>=window.pageXOffset+window.innerWidth&&(this.ul.style.left="".concat(b-f.width,"px")),c+f.height>=window.pageYOffset+window.innerHeight&&(this.ul.style.top="".concat(c-f.height,"px"))),document.addEventListener("keydown",this._keyboardNavigation),document.addEventListener("click",this.dismiss),this.ul}}]),a}();a.default=e});
//# sourceMappingURL=dropdown.js.map
